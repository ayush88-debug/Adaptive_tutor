import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import * as api from '../api';
import { Card, CardHeader, CardTitle, CardContent, CardDescription } from "@/components/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Button } from '@/components/ui/button';
import { CheckCircle2, Bot, TrendingUp, Target, Lightbulb } from 'lucide-react'; // Import new icons

const StudentDetailPage = () => {
  const { studentId } = useParams();
  const [details, setDetails] = useState(null);
  const [reports, setReports] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);

  const fetchDetailsAndReports = async () => {
    try {
      const [detailsResponse, reportsResponse] = await Promise.all([
        api.getStudentDetails(studentId),
        api.getReports(studentId)
      ]);
      setDetails(detailsResponse);
      setReports(reportsResponse.reports);
    } catch (err) {
      setError('Failed to fetch student data.');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchDetailsAndReports();
  }, [studentId]);

  const handleGenerateReport = async (subjectId) => {
    setIsGenerating(true);
    try {
      await api.generateReport(studentId, subjectId);
      const reportsResponse = await api.getReports(studentId);
      setReports(reportsResponse.reports);
    } catch (err) {
      alert(`Failed to generate report: ${err.message}`);
    } finally {
      setIsGenerating(false);
    }
  };


  if (loading) return <div className="text-center p-8 text-slate-500">Loading Student Details...</div>;
  if (error) return <div className="text-center p-8 text-red-500 font-semibold">{error}</div>;
  if (!details) return null;

  const { student, enrollments, attempts } = details;

  return (
    <div className="space-y-8">
      <div>
        <h1 className="text-3xl font-bold">{student.username}</h1>
        <p className="text-slate-500">{student.email}</p>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>Subject Progress</CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {enrollments.map(({ subjectId, completedModules }) => (
            <div key={subjectId._id}>
              <div className="flex justify-between items-center mb-2">
                <h3 className="font-semibold text-lg">{subjectId.title}</h3>
                <Button onClick={() => handleGenerateReport(subjectId._id)} disabled={isGenerating}>
                  <Bot className="mr-2 h-4 w-4" />
                  {isGenerating ? 'Generating...' : 'Generate AI Report'}
                </Button>
              </div>
              <ul className="space-y-2">
                {subjectId.modules.map(module => {
                  const isCompleted = completedModules.includes(module._id);
                  return (
                    <li key={module._id} className="flex items-center gap-3 p-2 border rounded-md bg-slate-50">
                      {isCompleted 
                        ? <CheckCircle2 className="h-5 w-5 text-green-500" /> 
                        : <div className="h-5 w-5 rounded-full border-2 border-slate-300" />
                      }
                      <span className={isCompleted ? "text-slate-400" : ""}>{module.order}. {module.title}</span>
                    </li>
                  )
                })}
              </ul>
            </div>
          ))}
           {enrollments.length === 0 && (
            <p className="text-sm text-slate-500">Student has not enrolled in any subjects.</p>
           )}
        </CardContent>
      </Card>
      
      {/* --- UPDATED AI Generated Reports Section --- */}
      <Card>
        <CardHeader>
            <CardTitle>AI Generated Reports</CardTitle>
            <CardDescription>Performance analyses generated by the AI tutor.</CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
            {reports.map(report => (
                <Card key={report._id} className="bg-slate-50/50">
                    <CardHeader>
                        <CardTitle className="text-lg">Report for {report.subjectId.title}</CardTitle>
                        <CardDescription>Generated on {new Date(report.generatedAt).toLocaleString()}</CardDescription>
                    </CardHeader>
                    <CardContent className="space-y-6">
                        <div>
                            <h4 className="font-semibold mb-2 text-slate-800">Performance Summary</h4>
                            <p className="text-sm text-slate-600 leading-relaxed">{report.generatedContent.studentPerformanceSummary}</p>
                        </div>
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                            {/* Strengths Column */}
                            <div>
                                <h4 className="flex items-center font-semibold mb-2 text-green-700">
                                    <TrendingUp className="h-5 w-5 mr-2" /> Strengths
                                </h4>
                                <ul className="list-disc pl-5 space-y-1 text-sm text-slate-600">
                                    {report.generatedContent.strengths.map((s, i) => <li key={i}>{s}</li>)}
                                </ul>
                            </div>
                             {/* Areas for Improvement Column */}
                             <div>
                                <h4 className="flex items-center font-semibold mb-2 text-amber-700">
                                    <Target className="h-5 w-5 mr-2" /> Areas for Improvement
                                </h4>
                                <ul className="list-disc pl-5 space-y-1 text-sm text-slate-600">
                                    {report.generatedContent.areasForImprovement.map((a, i) => <li key={i}>{a}</li>)}
                                </ul>
                            </div>
                            {/* Suggestions Column */}
                            <div>
                                <h4 className="flex items-center font-semibold mb-2 text-blue-700">
                                    <Lightbulb className="h-5 w-5 mr-2" /> Actionable Suggestions
                                </h4>
                                <ul className="list-disc pl-5 space-y-1 text-sm text-slate-600">
                                    {report.generatedContent.actionableSuggestions.map((s, i) => <li key={i}>{s}</li>)}
                                </ul>
                            </div>
                        </div>
                    </CardContent>
                </Card>
            ))}
            {reports.length === 0 && (
                <p className="text-center text-slate-500 py-8">No reports have been generated for this student yet.</p>
            )}
        </CardContent>
      </Card>
      
      <Card>
        <CardHeader>
          <CardTitle>Complete Quiz History</CardTitle>
          <CardDescription>A log of every quiz attempt made by the student.</CardDescription>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Subject</TableHead>
                <TableHead>Module</TableHead>
                <TableHead className="text-center">Score</TableHead>
                <TableHead className="text-center">Result</TableHead>
                <TableHead className="text-right">Date</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {attempts.map(attempt => (
                <TableRow key={attempt._id}>
                  <TableCell>{attempt.moduleId?.subjectId?.title || 'N/A'}</TableCell>
                  <TableCell>{attempt.moduleId?.title || 'N/A'}</TableCell>
                  <TableCell className="text-center">{attempt.score}%</TableCell>
                  <TableCell className="text-center">
                    <Badge variant={attempt.passed ? "success" : "destructive"}>
                      {attempt.passed ? 'Passed' : 'Failed'}
                    </Badge>
                  </TableCell>
                  <TableCell className="text-right">{new Date(attempt.createdAt).toLocaleString()}</TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
          {attempts.length === 0 && (
            <p className="text-center text-slate-500 py-8">No quiz attempts found.</p>
          )}
        </CardContent>
      </Card>
    </div>
  );
};

export default StudentDetailPage;